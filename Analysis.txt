        状态                                                          符号                                                                                                                                                                                                                                                                 输入串
1       0                                                               #                                                                                                                                                                VOID ID ( ) { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
2       0 2                                                             # VOID                                                                                                                                                                ID ( ) { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
3       0 6                                                             # return_type                                                                                                                                                         ID ( ) { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
4       0 6 12                                                          # return_type ID                                                                                                                                                         ( ) { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
5       0 6 12 18                                                       # return_type ID (                                                                                                                                                         ) { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
6       0 6 12 18 21                                                    # return_type ID ( )                                                                                                                                                         { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
7       0 6 13                                                          # return_type function_name                                                                                                                                                  { INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
8       0 6 13 20                                                       # return_type function_name {                                                                                                                                                  INT ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
9       0 6 13 20 31                                                    # return_type function_name { INT                                                                                                                                                  ID ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
10      0 6 13 20 31 72                                                 # return_type function_name { INT ID                                                                                                                                                  ; INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
11      0 6 13 20 31 72 117                                             # return_type function_name { INT ID ;                                                                                                                                                  INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
12      0 6 13 20 51                                                    # return_type function_name { variable_definition                                                                                                                                       INT ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
13      0 6 13 20 51 31                                                 # return_type function_name { variable_definition INT                                                                                                                                       ID ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
14      0 6 13 20 51 31 72                                              # return_type function_name { variable_definition INT ID                                                                                                                                       ; ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
15      0 6 13 20 51 31 72 117                                          # return_type function_name { variable_definition INT ID ;                                                                                                                                       ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
16      0 6 13 20 51 51                                                 # return_type function_name { variable_definition variable_definition                                                                                                                            ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
17      0 6 13 20 51 92                                                 # return_type function_name { variable_definition variable_definition_list                                                                                                                       ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
18      0 6 13 20 52                                                    # return_type function_name { variable_definition_list                                                                                                                                           ID = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
19      0 6 13 20 52 29                                                 # return_type function_name { variable_definition_list ID                                                                                                                                           = NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
20      0 6 13 20 52 29 70                                              # return_type function_name { variable_definition_list ID =                                                                                                                                           NUM ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
21      0 6 13 20 52 29 70 32                                           # return_type function_name { variable_definition_list ID = NUM                                                                                                                                           ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
22      0 6 13 20 52 29 70 44                                           # return_type function_name { variable_definition_list ID = primary_expression                                                                                                                            ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
23      0 6 13 20 52 29 70 49                                           # return_type function_name { variable_definition_list ID = unary_expression                                                                                                                              ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
24      0 6 13 20 52 29 70 43                                           # return_type function_name { variable_definition_list ID = multiplicative_expression                                                                                                                     ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
25      0 6 13 20 52 29 70 35                                           # return_type function_name { variable_definition_list ID = additive_expression                                                                                                                           ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
26      0 6 13 20 52 29 70 45                                           # return_type function_name { variable_definition_list ID = relational_expression                                                                                                                         ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
27      0 6 13 20 52 29 70 38                                           # return_type function_name { variable_definition_list ID = equality_expression                                                                                                                           ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
28      0 6 13 20 52 29 70 115                                          # return_type function_name { variable_definition_list ID = assignment_expression                                                                                                                         ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
29      0 6 13 20 52 36                                                 # return_type function_name { variable_definition_list assignment_expression                                                                                                                              ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
30      0 6 13 20 52 39                                                 # return_type function_name { variable_definition_list expression                                                                                                                                         ; ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
31      0 6 13 20 52 39 81                                              # return_type function_name { variable_definition_list expression ;                                                                                                                                         ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
32      0 6 13 20 52 40                                                 # return_type function_name { variable_definition_list expression_statement                                                                                                                                 ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
33      0 6 13 20 52 47                                                 # return_type function_name { variable_definition_list statement                                                                                                                                            ID = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
34      0 6 13 20 52 47 29                                              # return_type function_name { variable_definition_list statement ID                                                                                                                                            = NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
35      0 6 13 20 52 47 29 70                                           # return_type function_name { variable_definition_list statement ID =                                                                                                                                            NUM ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
36      0 6 13 20 52 47 29 70 32                                        # return_type function_name { variable_definition_list statement ID = NUM                                                                                                                                            ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
37      0 6 13 20 52 47 29 70 44                                        # return_type function_name { variable_definition_list statement ID = primary_expression                                                                                                                             ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
38      0 6 13 20 52 47 29 70 49                                        # return_type function_name { variable_definition_list statement ID = unary_expression                                                                                                                               ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
39      0 6 13 20 52 47 29 70 43                                        # return_type function_name { variable_definition_list statement ID = multiplicative_expression                                                                                                                      ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
40      0 6 13 20 52 47 29 70 35                                        # return_type function_name { variable_definition_list statement ID = additive_expression                                                                                                                            ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
41      0 6 13 20 52 47 29 70 45                                        # return_type function_name { variable_definition_list statement ID = relational_expression                                                                                                                          ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
42      0 6 13 20 52 47 29 70 38                                        # return_type function_name { variable_definition_list statement ID = equality_expression                                                                                                                            ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
43      0 6 13 20 52 47 29 70 115                                       # return_type function_name { variable_definition_list statement ID = assignment_expression                                                                                                                          ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
44      0 6 13 20 52 47 36                                              # return_type function_name { variable_definition_list statement assignment_expression                                                                                                                               ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
45      0 6 13 20 52 47 39                                              # return_type function_name { variable_definition_list statement expression                                                                                                                                          ; WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
46      0 6 13 20 52 47 39 81                                           # return_type function_name { variable_definition_list statement expression ;                                                                                                                                          WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
47      0 6 13 20 52 47 40                                              # return_type function_name { variable_definition_list statement expression_statement                                                                                                                                  WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
48      0 6 13 20 52 47 47                                              # return_type function_name { variable_definition_list statement statement                                                                                                                                             WHILE ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
49      0 6 13 20 52 47 47 34                                           # return_type function_name { variable_definition_list statement statement WHILE                                                                                                                                             ( ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
50      0 6 13 20 52 47 47 34 75                                        # return_type function_name { variable_definition_list statement statement WHILE (                                                                                                                                             ID < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
51      0 6 13 20 52 47 47 34 75 59                                     # return_type function_name { variable_definition_list statement statement WHILE ( ID                                                                                                                                             < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
52      0 6 13 20 52 47 47 34 75 66                                     # return_type function_name { variable_definition_list statement statement WHILE ( primary_expression                                                                                                                             < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
53      0 6 13 20 52 47 47 34 75 68                                     # return_type function_name { variable_definition_list statement statement WHILE ( unary_expression                                                                                                                               < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
54      0 6 13 20 52 47 47 34 75 65                                     # return_type function_name { variable_definition_list statement statement WHILE ( multiplicative_expression                                                                                                                      < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
55      0 6 13 20 52 47 47 34 75 61                                     # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression                                                                                                                            < NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
56      0 6 13 20 52 47 47 34 75 61 101                                 # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression <                                                                                                                            NUM ) { ID = ID * ID ; ID = ID + NUM ; } } #
57      0 6 13 20 52 47 47 34 75 61 101 60                              # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression < NUM                                                                                                                            ) { ID = ID * ID ; ID = ID + NUM ; } } #
58      0 6 13 20 52 47 47 34 75 61 101 66                              # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression < primary_expression                                                                                                             ) { ID = ID * ID ; ID = ID + NUM ; } } #
59      0 6 13 20 52 47 47 34 75 61 101 68                              # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression < unary_expression                                                                                                               ) { ID = ID * ID ; ID = ID + NUM ; } } #
60      0 6 13 20 52 47 47 34 75 61 101 65                              # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression < multiplicative_expression                                                                                                      ) { ID = ID * ID ; ID = ID + NUM ; } } #
61      0 6 13 20 52 47 47 34 75 61 101 61                              # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression < additive_expression                                                                                                            ) { ID = ID * ID ; ID = ID + NUM ; } } #
62      0 6 13 20 52 47 47 34 75 61 101 137                             # return_type function_name { variable_definition_list statement statement WHILE ( additive_expression < relational_expression                                                                                                          ) { ID = ID * ID ; ID = ID + NUM ; } } #
63      0 6 13 20 52 47 47 34 75 67                                     # return_type function_name { variable_definition_list statement statement WHILE ( relational_expression                                                                                                                                ) { ID = ID * ID ; ID = ID + NUM ; } } #
64      0 6 13 20 52 47 47 34 75 63                                     # return_type function_name { variable_definition_list statement statement WHILE ( equality_expression                                                                                                                                  ) { ID = ID * ID ; ID = ID + NUM ; } } #
65      0 6 13 20 52 47 47 34 75 62                                     # return_type function_name { variable_definition_list statement statement WHILE ( assignment_expression                                                                                                                                ) { ID = ID * ID ; ID = ID + NUM ; } } #
66      0 6 13 20 52 47 47 34 75 119                                    # return_type function_name { variable_definition_list statement statement WHILE ( expression                                                                                                                                           ) { ID = ID * ID ; ID = ID + NUM ; } } #
67      0 6 13 20 52 47 47 34 75 119 149                                # return_type function_name { variable_definition_list statement statement WHILE ( expression )                                                                                                                                           { ID = ID * ID ; ID = ID + NUM ; } } #
68      0 6 13 20 52 47 47 34 75 119 149 53                             # return_type function_name { variable_definition_list statement statement WHILE ( expression ) {                                                                                                                                           ID = ID * ID ; ID = ID + NUM ; } } #
69      0 6 13 20 52 47 47 34 75 119 149 53 29                          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID                                                                                                                                           = ID * ID ; ID = ID + NUM ; } } #
70      0 6 13 20 52 47 47 34 75 119 149 53 29 70                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID =                                                                                                                                           ID * ID ; ID = ID + NUM ; } } #
71      0 6 13 20 52 47 47 34 75 119 149 53 29 70 29                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = ID                                                                                                                                           * ID ; ID = ID + NUM ; } } #
72      0 6 13 20 52 47 47 34 75 119 149 53 29 70 44                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = primary_expression                                                                                                                           * ID ; ID = ID + NUM ; } } #
73      0 6 13 20 52 47 47 34 75 119 149 53 29 70 49                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = unary_expression                                                                                                                             * ID ; ID = ID + NUM ; } } #
74      0 6 13 20 52 47 47 34 75 119 149 53 29 70 49 88                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = unary_expression *                                                                                                                             ID ; ID = ID + NUM ; } } #
75      0 6 13 20 52 47 47 34 75 119 149 53 29 70 49 88 90              # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = unary_expression * ID                                                                                                                             ; ID = ID + NUM ; } } #
76      0 6 13 20 52 47 47 34 75 119 149 53 29 70 49 88 44              # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = unary_expression * primary_expression                                                                                                             ; ID = ID + NUM ; } } #
77      0 6 13 20 52 47 47 34 75 119 149 53 29 70 49 88 49              # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = unary_expression * unary_expression                                                                                                               ; ID = ID + NUM ; } } #
78      0 6 13 20 52 47 47 34 75 119 149 53 29 70 49 88 129             # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = unary_expression * multiplicative_expression                                                                                                      ; ID = ID + NUM ; } } #
79      0 6 13 20 52 47 47 34 75 119 149 53 29 70 43                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = multiplicative_expression                                                                                                                         ; ID = ID + NUM ; } } #
80      0 6 13 20 52 47 47 34 75 119 149 53 29 70 35                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = additive_expression                                                                                                                               ; ID = ID + NUM ; } } #
81      0 6 13 20 52 47 47 34 75 119 149 53 29 70 45                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = relational_expression                                                                                                                             ; ID = ID + NUM ; } } #
82      0 6 13 20 52 47 47 34 75 119 149 53 29 70 38                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = equality_expression                                                                                                                               ; ID = ID + NUM ; } } #
83      0 6 13 20 52 47 47 34 75 119 149 53 29 70 115                   # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { ID = assignment_expression                                                                                                                             ; ID = ID + NUM ; } } #
84      0 6 13 20 52 47 47 34 75 119 149 53 36                          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { assignment_expression                                                                                                                                  ; ID = ID + NUM ; } } #
85      0 6 13 20 52 47 47 34 75 119 149 53 39                          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { expression                                                                                                                                             ; ID = ID + NUM ; } } #
86      0 6 13 20 52 47 47 34 75 119 149 53 39 81                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { expression ;                                                                                                                                             ID = ID + NUM ; } } #
87      0 6 13 20 52 47 47 34 75 119 149 53 40                          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { expression_statement                                                                                                                                     ID = ID + NUM ; } } #
88      0 6 13 20 52 47 47 34 75 119 149 53 47                          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement                                                                                                                                                ID = ID + NUM ; } } #
89      0 6 13 20 52 47 47 34 75 119 149 53 47 29                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID                                                                                                                                                = ID + NUM ; } } #
90      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID =                                                                                                                                                ID + NUM ; } } #
91      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 29                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = ID                                                                                                                                                + NUM ; } } #
92      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 44                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = primary_expression                                                                                                                                + NUM ; } } #
93      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 49                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = unary_expression                                                                                                                                  + NUM ; } } #
94      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression                                                                                                                         + NUM ; } } #
95      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43 82              # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression +                                                                                                                         NUM ; } } #
96      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43 82 32           # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression + NUM                                                                                                                         ; } } #
97      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43 82 44           # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression + primary_expression                                                                                                          ; } } #
98      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43 82 49           # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression + unary_expression                                                                                                            ; } } #
99      0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43 82 43           # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression + multiplicative_expression                                                                                                         ; } } #
100     0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 43 82 125          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = multiplicative_expression + additive_expression                                                                                                         ; } } #
101     0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 35                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = additive_expression                                                                                                                                     ; } } #
102     0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 45                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = relational_expression                                                                                                                                   ; } } #
103     0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 38                 # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = equality_expression                                                                                                                                     ; } } #
104     0 6 13 20 52 47 47 34 75 119 149 53 47 29 70 115                # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement ID = assignment_expression                                                                                                                                   ; } } #
105     0 6 13 20 52 47 47 34 75 119 149 53 47 36                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement assignment_expression                                                                                                                                        ; } } #
106     0 6 13 20 52 47 47 34 75 119 149 53 47 39                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement expression                                                                                                                                                   ; } } #
107     0 6 13 20 52 47 47 34 75 119 149 53 47 39 81                    # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement expression ;                                                                                                                                                   } } #
108     0 6 13 20 52 47 47 34 75 119 149 53 47 40                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement expression_statement                                                                                                                                           } } #
109     0 6 13 20 52 47 47 34 75 119 149 53 47 47                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement statement                                                                                                                                                      } } #
110     0 6 13 20 52 47 47 34 75 119 149 53 47 86                       # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement statement_list                                                                                                                                                 } } #
111     0 6 13 20 52 47 47 34 75 119 149 53 95                          # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement_list                                                                                                                                                           } } #
112     0 6 13 20 52 47 47 34 75 119 149 53 95 132                      # return_type function_name { variable_definition_list statement statement WHILE ( expression ) { statement_list }                                                                                                                                                           } #
113     0 6 13 20 52 47 47 34 75 119 149 37                             # return_type function_name { variable_definition_list statement statement WHILE ( expression ) compound_statement                                                                                                                                                           } #
114     0 6 13 20 52 47 47 34 75 119 149 163                            # return_type function_name { variable_definition_list statement statement WHILE ( expression ) statement                                                                                                                                                                    } #
115     0 6 13 20 52 47 47 41                                           # return_type function_name { variable_definition_list statement statement iteration_statement                                                                                                                                                                               } #
116     0 6 13 20 52 47 47 47                                           # return_type function_name { variable_definition_list statement statement statement                                                                                                                                                                                         } #
117     0 6 13 20 52 47 47 86                                           # return_type function_name { variable_definition_list statement statement statement_list                                                                                                                                                                                    } #
118     0 6 13 20 52 47 86                                              # return_type function_name { variable_definition_list statement statement_list                                                                                                                                                                                              } #
119     0 6 13 20 52 93                                                 # return_type function_name { variable_definition_list statement_list                                                                                                                                                                                                        } #
120     0 6 13 20 52 93 131                                             # return_type function_name { variable_definition_list statement_list }                                                                                                                                                                                                        #
121     0 6 13 19                                                       # return_type function_name compound_statement                                                                                                                                                                                                                                 #
122     0 3                                                             # function_definition                                                                                                                                                                                                                                                          #
123     0 4                                                             # function_definition_list                                                                                                                                                                                                                                                     #
124     0 5                                                             # program                                                                                                                                                                                                                                                                      #


语法树
(122,program)  ---->  (121,function_definition_list) 
(121,function_definition_list)  ---->  (120,function_definition) 
(120,function_definition)  ---->  (1,return_type) (5,function_name) (119,compound_statement) 
(119,compound_statement)  ---->  (6,{) (16,variable_definition_list) (117,statement_list) (118,}) 
(117,statement_list)  ---->  (31,statement) (116,statement_list) 
(116,statement_list)  ---->  (46,statement) (115,statement_list) 
(115,statement_list)  ---->  (114,statement) 
(114,statement)  ---->  (113,iteration_statement) 
(113,iteration_statement)  ---->  (47,WHILE) (48,() (64,expression) (65,)) (112,statement) 
(112,statement)  ---->  (111,compound_statement) 
(111,compound_statement)  ---->  (66,{) (109,statement_list) (110,}) 
(109,statement_list)  ---->  (86,statement) (108,statement_list) 
(108,statement_list)  ---->  (107,statement) 
(107,statement)  ---->  (106,expression_statement) 
(106,expression_statement)  ---->  (104,expression) (105,;) 
(104,expression)  ---->  (103,assignment_expression) 
(103,assignment_expression)  ---->  (87,ID) (88,=) (102,assignment_expression) 
(102,assignment_expression)  ---->  (101,equality_expression) 
(101,equality_expression)  ---->  (100,relational_expression) 
(100,relational_expression)  ---->  (99,additive_expression) 
(99,additive_expression)  ---->  (92,multiplicative_expression) (93,+) (98,additive_expression) 
(98,additive_expression)  ---->  (97,multiplicative_expression) 
(97,multiplicative_expression)  ---->  (96,unary_expression) 
(96,unary_expression)  ---->  (95,primary_expression) 
(95,primary_expression)  ---->  (94,NUM) 
(92,multiplicative_expression)  ---->  (91,unary_expression) 
(91,unary_expression)  ---->  (90,primary_expression) 
(90,primary_expression)  ---->  (89,ID) 
(86,statement)  ---->  (85,expression_statement) 
(85,expression_statement)  ---->  (83,expression) (84,;) 
(83,expression)  ---->  (82,assignment_expression) 
(82,assignment_expression)  ---->  (67,ID) (68,=) (81,assignment_expression) 
(81,assignment_expression)  ---->  (80,equality_expression) 
(80,equality_expression)  ---->  (79,relational_expression) 
(79,relational_expression)  ---->  (78,additive_expression) 
(78,additive_expression)  ---->  (77,multiplicative_expression) 
(77,multiplicative_expression)  ---->  (71,unary_expression) (72,*) (76,multiplicative_expression) 
(76,multiplicative_expression)  ---->  (75,unary_expression) 
(75,unary_expression)  ---->  (74,primary_expression) 
(74,primary_expression)  ---->  (73,ID) 
(71,unary_expression)  ---->  (70,primary_expression) 
(70,primary_expression)  ---->  (69,ID) 
(64,expression)  ---->  (63,assignment_expression) 
(63,assignment_expression)  ---->  (62,equality_expression) 
(62,equality_expression)  ---->  (61,relational_expression) 
(61,relational_expression)  ---->  (53,additive_expression) (54,<) (60,relational_expression) 
(60,relational_expression)  ---->  (59,additive_expression) 
(59,additive_expression)  ---->  (58,multiplicative_expression) 
(58,multiplicative_expression)  ---->  (57,unary_expression) 
(57,unary_expression)  ---->  (56,primary_expression) 
(56,primary_expression)  ---->  (55,NUM) 
(53,additive_expression)  ---->  (52,multiplicative_expression) 
(52,multiplicative_expression)  ---->  (51,unary_expression) 
(51,unary_expression)  ---->  (50,primary_expression) 
(50,primary_expression)  ---->  (49,ID) 
(46,statement)  ---->  (45,expression_statement) 
(45,expression_statement)  ---->  (43,expression) (44,;) 
(43,expression)  ---->  (42,assignment_expression) 
(42,assignment_expression)  ---->  (32,ID) (33,=) (41,assignment_expression) 
(41,assignment_expression)  ---->  (40,equality_expression) 
(40,equality_expression)  ---->  (39,relational_expression) 
(39,relational_expression)  ---->  (38,additive_expression) 
(38,additive_expression)  ---->  (37,multiplicative_expression) 
(37,multiplicative_expression)  ---->  (36,unary_expression) 
(36,unary_expression)  ---->  (35,primary_expression) 
(35,primary_expression)  ---->  (34,NUM) 
(31,statement)  ---->  (30,expression_statement) 
(30,expression_statement)  ---->  (28,expression) (29,;) 
(28,expression)  ---->  (27,assignment_expression) 
(27,assignment_expression)  ---->  (17,ID) (18,=) (26,assignment_expression) 
(26,assignment_expression)  ---->  (25,equality_expression) 
(25,equality_expression)  ---->  (24,relational_expression) 
(24,relational_expression)  ---->  (23,additive_expression) 
(23,additive_expression)  ---->  (22,multiplicative_expression) 
(22,multiplicative_expression)  ---->  (21,unary_expression) 
(21,unary_expression)  ---->  (20,primary_expression) 
(20,primary_expression)  ---->  (19,NUM) 
(16,variable_definition_list)  ---->  (10,variable_definition) (15,variable_definition_list) 
(15,variable_definition_list)  ---->  (14,variable_definition) 
(14,variable_definition)  ---->  (11,INT) (12,ID) (13,;) 
(10,variable_definition)  ---->  (7,INT) (8,ID) (9,;) 
(5,function_name)  ---->  (2,ID) (3,() (4,)) 
(1,return_type)  ---->  (0,VOID) 


